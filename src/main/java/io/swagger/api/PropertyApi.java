/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.DataBaseObjects;
import io.swagger.model.PropertyBody;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.ArrayList;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-10-01T20:14:45.365242941Z[GMT]")
@Validated
public interface PropertyApi {

    @Operation(summary = "Получить список всех объектов недвижимости", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Список объектов недвижимости", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DataBaseObjects.RentalProperty.class)))) })
    @RequestMapping(value = "/property",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ArrayList<DataBaseObjects.RentalProperty>> propertyGet();


    @Operation(summary = "Добавить новый объект недвижимости", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Объект недвижимости успешно добавлен"),
        
        @ApiResponse(responseCode = "409", description = "Неверный запрос") })
    @RequestMapping(value = "/property",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<DataBaseObjects.RentalProperty> propertyPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody PropertyBody body);


    @Operation(summary = "Удалить объект недвижимости по улице", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Объект недвижимости успешно удален"),
        
        @ApiResponse(responseCode = "404", description = "Объект недвижимости не найден") })
    @RequestMapping(value = "/property",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> propertyDelete(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @RequestBody PropertyBody body);


    @Operation(summary = "Получить один объект", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Список объект недвижимости", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PropertyBody.class)))),
        
        @ApiResponse(responseCode = "404", description = "Объект недвижимости не найдены") })
    @RequestMapping(value = "/property/{street:.+}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DataBaseObjects.RentalProperty> propertyStreetGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("street") String street);


    @Operation(summary = "Изменить стоимость и срок съема объекта недвижимости по улице", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Информация об объекте недвижимости успешно обновлена"),

        @ApiResponse(responseCode = "404", description = "Объект недвижимости не найден") })
    @RequestMapping(value = "/property",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<DataBaseObjects.RentalProperty> propertyStreetPut(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody PropertyBody body);

}

